# 工作流名称，会显示在 Actions 页面
name: Deploy to GitHub Pages

# 触发工作流的事件
on:
  # 1. 自动触发：当有代码被推送到 "main" 分支时
  push:
    branches:
      - main  # 你可以根据你的主分支名修改，可能是 master

  # 2. 手动触发：允许你在 Actions 页面手动运行此工作流
  workflow_dispatch:

# 作业：一个工作流可以包含一个或多个作业
jobs:
  # 作业的唯一 ID
  deploy:
    # 作业名称，会显示在 Actions 页面
    name: Deploy to Pages
    # 运行此作业所需的虚拟机环境
    runs-on: ubuntu-latest

    # 定义作业的步骤
    steps:
      # 第 1 步：检出代码
      # 这个动作会下载你的仓库代码到虚拟机中，以便后续步骤使用
      - name: Checkout repository
        uses: actions/checkout@v4 # 使用官方的 checkout@v4 动作

      # 第 2 步：构建静态文件 (如果需要)
      # 对于纯 HTML 文件，这一步是可选的。但如果你的项目需要编译 (如 Sass, TypeScript)，
      # 你需要在这里添加构建命令。对于你的情况，可以跳过或保留。
      # - name: Build static files
      #   run: npm install && npm run build # 这是一个示例，请根据你的项目修改

      # 第 3 步：配置 GitHub Pages
      # 这个动作会为后续的部署步骤准备好 Pages 环境
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # 第 4 步：上传构建产物
      # 这个动作会将你的静态文件打包成一个 artifact (产物)，供部署使用
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 指定要上传的文件夹。对于简单的 HTML 项目，文件通常在根目录。
          # 如果你的文件在 'dist' 或 'build' 文件夹，请修改此路径。
          path: '.'

      # 第 5 步：部署到 GitHub Pages
      # 这个动作会将上一步上传的 artifact 部署到你的 GitHub Pages 站点
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
